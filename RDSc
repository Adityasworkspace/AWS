Amazon RDS Overview
Amazon RDS (Relational Database Service) is a fully managed service provided by AWS (Amazon Web Services) that simplifies the process of setting up, operating, and scaling relational databases in the cloud. With RDS, developers can focus on building applications without having to manage database infrastructure, hardware, or complex administrative tasks.

Key Features of Amazon RDS:
Support for Multiple Database Engines:

Amazon RDS supports several widely-used relational database engines:
-MySQL
-PostgreSQL
-MariaDB
-Oracle
-Microsoft SQL Server
-Amazon Aurora (a high-performance, AWS-optimized database)

Fully Managed Service:

-Automated Backups: Regular backups are taken automatically, with point-in-time recovery options.
-Patching: RDS handles the application of patches to ensure that the database software is up to date.
-Scaling: Storage and compute resources can be easily scaled to match growing demand.
-High Availability & Fault Tolerance:

Multi-AZ Deployments: RDS can deploy databases across multiple availability zones to enhance availability and fault tolerance.
Read Replicas: Can be used to offload read-heavy workloads and improve performance.
Security:

Encryption: Data is encrypted both at rest and in transit.
Access Control: Integrated with AWS Identity and Access Management (IAM) for precise access control.
Virtual Private Cloud (VPC) support for network isolation and security.
Cost-Effective:

Flexible pricing options, including on-demand pricing and reserved instances.
Pay only for the resources used, with no upfront investment in hardware.
Automated Monitoring & Maintenance:

CloudWatch integration for monitoring database health and performance.
Automatic software patching and maintenance for uninterrupted operation.

How Amazon RDS Works:

Launch an Instance: Developers can create a new RDS instance by choosing the desired database engine, instance type, and configuration settings.
Managed Operations: AWS takes care of operational tasks such as backups, patching, and scaling.
Data Access: Databases are easily accessible through standard database connection protocols, and applications can interact with RDS just like they would with any other relational database.

Why Use Amazon RDS?
Simplifies Database Management: RDS removes the complexity of managing hardware and software, so you can focus on application development.
Scalable & Flexible: Easily scale up or down based on demand, and handle traffic spikes seamlessly.
Reliability: Built-in high availability and automatic backups reduce the risk of downtime and data loss.


TOMCAT PORT NO IS 8080
MYSQL : 3306
TOMCAT : 8080

install 
mysql -h database-2.cn4w8u0gmbjl.ap-southeast-1.rds.amazonaws.com -u admin -pPasswd123$

search tomcat
download tar file
then use wget of that tarlink
extrace=t
tar -xvzf apache-tomcat-cersiontar.gz -C /opt
ls
aws containerd tomcat
cd tomcat/
cd bin 
ls
catalina.sh
to run the tomcat script it is contained in catalina 
so we have to give permission to ther file by using
chmod +x catalina.sh
./catalina.sh
this command cannot be run coz we dont have jawa installed in our server , we have to install jawa
yum jawa install1.8* -y
run catalina.sh
./catalina.sh start



FOR APPLICATION

curl command copy of student war
 ls
go to lib 
cd lib
2nd curl command run curl -0 http-----mysql-connector .jar
cd ..
currently inside bin

then url copy ip and /student/
and web is hosted
DONE]
'






